// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TCPPAYLOADREQUEST_H_
#define FLATBUFFERS_GENERATED_TCPPAYLOADREQUEST_H_

#include "flatbuffers/flatbuffers.h"

struct TCPPayloadRequest;
struct TCPPayloadRequestBuilder;

struct TCPPayloadRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef TCPPayloadRequestBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_KEY = 4,
        VT_VALUE_LENGTH = 6,
        VT_OP = 8
    };
    const flatbuffers::String *key() const {
        return GetPointer<const flatbuffers::String *>(VT_KEY);
    }
    int32_t value_length() const { return GetField<int32_t>(VT_VALUE_LENGTH, 0); }
    int8_t op() const { return GetField<int8_t>(VT_OP, 0); }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_KEY) &&
               verifier.VerifyString(key()) && VerifyField<int32_t>(verifier, VT_VALUE_LENGTH) &&
               VerifyField<int8_t>(verifier, VT_OP) && verifier.EndTable();
    }
};

struct TCPPayloadRequestBuilder {
    typedef TCPPayloadRequest Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_key(flatbuffers::Offset<flatbuffers::String> key) {
        fbb_.AddOffset(TCPPayloadRequest::VT_KEY, key);
    }
    void add_value_length(int32_t value_length) {
        fbb_.AddElement<int32_t>(TCPPayloadRequest::VT_VALUE_LENGTH, value_length, 0);
    }
    void add_op(int8_t op) { fbb_.AddElement<int8_t>(TCPPayloadRequest::VT_OP, op, 0); }
    explicit TCPPayloadRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    flatbuffers::Offset<TCPPayloadRequest> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<TCPPayloadRequest>(end);
        return o;
    }
};

inline flatbuffers::Offset<TCPPayloadRequest> CreateTCPPayloadRequest(
    flatbuffers::FlatBufferBuilder &_fbb, flatbuffers::Offset<flatbuffers::String> key = 0,
    int32_t value_length = 0, int8_t op = 0) {
    TCPPayloadRequestBuilder builder_(_fbb);
    builder_.add_value_length(value_length);
    builder_.add_key(key);
    builder_.add_op(op);
    return builder_.Finish();
}

inline flatbuffers::Offset<TCPPayloadRequest> CreateTCPPayloadRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb, const char *key = nullptr, int32_t value_length = 0,
    int8_t op = 0) {
    auto key__ = key ? _fbb.CreateString(key) : 0;
    return CreateTCPPayloadRequest(_fbb, key__, value_length, op);
}

inline const TCPPayloadRequest *GetTCPPayloadRequest(const void *buf) {
    return flatbuffers::GetRoot<TCPPayloadRequest>(buf);
}

inline const TCPPayloadRequest *GetSizePrefixedTCPPayloadRequest(const void *buf) {
    return flatbuffers::GetSizePrefixedRoot<TCPPayloadRequest>(buf);
}

inline bool VerifyTCPPayloadRequestBuffer(flatbuffers::Verifier &verifier) {
    return verifier.VerifyBuffer<TCPPayloadRequest>(nullptr);
}

inline bool VerifySizePrefixedTCPPayloadRequestBuffer(flatbuffers::Verifier &verifier) {
    return verifier.VerifySizePrefixedBuffer<TCPPayloadRequest>(nullptr);
}

inline void FinishTCPPayloadRequestBuffer(flatbuffers::FlatBufferBuilder &fbb,
                                          flatbuffers::Offset<TCPPayloadRequest> root) {
    fbb.Finish(root);
}

inline void FinishSizePrefixedTCPPayloadRequestBuffer(flatbuffers::FlatBufferBuilder &fbb,
                                                      flatbuffers::Offset<TCPPayloadRequest> root) {
    fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TCPPAYLOADREQUEST_H_
